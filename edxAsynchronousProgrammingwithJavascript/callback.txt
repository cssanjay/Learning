Callback Functions
Callback functions are functions that are passed as arguments into other functions to be executed at a later point in time.

Anonymous Callbacks
Callbacks can be created and used without being bound to a specific function name. Anonymous callbacks are useful when a callback is only needed to be declared once, since they are quicker to write than named callbacks.

var d = calculate(10,5, (x,y) => {return x - y}); //using arrow functions

console.log(d); // logs 5

Callback Examples
Several JavaScript functions already take in callbacks as arguments.

map()
The map() method calls a callback function on each element in the array and then returns a new array with those results.

Notice how the map() method uses a callback function:

var array = [1,2,3,4,5];

var newArray = array.map(function(x){ //uses an anonymous callback function to square each element
    return x * x;
});

console.log(newArray);
// logs [1,4,9,16,25]


filter()
The filter() method removes elements in an array that do not pass a certain criteria defined by a callback function.

Notice how the filter() method is used to remove elements in an array that are not even:

var array = [1,2,3,4,5];

function isEven(x){ //checks if a value is even
   return x % 2 == 0; 
}

var newArray = array.filter(isEven); //uses a callback to check if an element is even

console.log(newArray);
// logs [2,4]

Chaining Callbacks with Continuation Passing Style
The Continuation Passing Style(CPS) is a programming style used to chain callback functions together. In CPS, methods with callback functions as arguments are called within other callback functions. CPS is characterized by having methods that have callback functions as their last argument.

function myFunction(x,callback){
    callback(x);
}

var answer = 0;

myFunction(10,function(x){ //callback1
    var result = x * x; //result = 100

    myFunction(result, function(x){ //callback2 within callback 1
        var result2 = x + x; //result2 = 200

        myFunction(result2, function(x){ //callback 3 within callback 2
            answer = x + 100;
            console.log(answer); // logs 300
        })
    })
});