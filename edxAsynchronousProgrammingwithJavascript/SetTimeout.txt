SetTimeout()
The setTimeout() method is used to schedule a task to be put on the event queue after a given amount of time. The first parameter to setTimeout() is the callback function that is going to be executed. The second parameter is the amount of time to wait before putting the task on the event queue. setTimeout() is non-blocking and other code may run while the setTimeout() task is waiting to be executed.

clearTimeout()
The clearTimeout() function is used to cancel a timeout that is still pending. The setTimeout() method call returns a numeric timerID that is used to identify the timer. This timerID can be passed into the clearTimeout() method call to stop the timer.

Notice how clearTimeout() is used to stop a setTimeout() callback from executing:

var timeout = setTimeout(function(){
    console.log("hello")  
},1000); //waits 1 second

clearTimeout(timeout); //clears the setTimeout callback from running

//nothing gets logged


SetInterval()
The setInterval() method is used to schedule a reoccurring task to be put on the event queue every time a given number of milliseconds elapses. The first parameter to setInterval() is the callback function that is going to be executed. The second parameter is the amount of time to wait before the reoccurring task is put back on to the event queue.

ClearInterval()
The clearInterval() method is used to stop an interval timer set by setInterval(). The setInterval() method call returns a numeric timerID that is used to identify the interval timer. This timerID can be passed into the clearInterval() method call to stop the interval timer.

Notice how clearInterval() is used to stop an interval from continuing after it executes three times:

var count = 0;

var interval = setInterval(function(){
    count++;
    console.log(count);
    if(count >= 3){
        clearInterval(interval); //clears the interval after it is called 3 times
    }
},1000); //executes callback every second

/*Console Output
  >1  <--after 1 second
  >2  <--after 2 seconds
  >3  <--after 3 seconds
*/

