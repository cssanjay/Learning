There are actually two more, equally important, reasons for defining a default constructor in your classes.  First off, compound types (arrays or pointers) that may be defined inside a code block, can have undefined values when initialized to their default values.  You should ensure that these members are initialized correctly by creating your own default constructor and performing the initialization yourself.

The second reason is a little more complex and arises when your class contains a member that is a class itself.  The compiler's default constructor is unable to initialize that member.



**Person.cpp**


    #include "stdafx.h"
    #include "Person.h"
    #include <iostream>
    
    Person::Person()
    {
    
    }
    
    Person::Person(std::string fName, std::string lName)
    {
        this -> firstName = fName;
        this -> lastName = lName;
    }
    
    Person::Person(std::string fName, std::string lName, int age)
    {
        this -> firstName = fName;
        this -> lastName = lName;
    
        this -> age = age;
    }
    
    
    Person::~Person()
    {
    }

The first constructor is the default constructor.  It has no parameters and because we have not initialized our private member variables, this constructor will do so with the default values for data types of those member variables.

The second constructor takes two arguments and uses those to initialize the first and last name member variables in the class.  Here is where you need to do a little research on the compiler you are using to determine how the age variable will be initialized.  The reason is, because we do not initialize age in the class when we declared it and because this constructor does not initialize it either, if you try to use the age variable in an instance of Person, what result will you get?  The default constructor will initialize age to a default value (dependent on compiler), but if you call the second constructor, age may or may not get initialized.

The final constructor takes three arguments to initialize all three member variables.  When you create a new instance of the Person class, you can choose any of these constructors and the compiler will know which one to use based on the number of arguments you pass in as shown in this code sample.

    #include "stdafx.h"
    #include <iostream>
    #include "Person.h"
    
    using namespace std;
    
    int main()
    {
    
        // create a Person instance using default constructor
        Person *pOne = new Person();
        
        // Create a Person instance using 2 argument constructor
        Person *pTwo = new Person("Tom", "Thumb");
    
        // Create a Person instance using 3 argument constructor
        Person *pThree = new Person("Tom", "Thumb", 15);
    
    return 0;
    }



