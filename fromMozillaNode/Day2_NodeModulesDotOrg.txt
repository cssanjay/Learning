https://nodejs.org/api/modules.html#modules_modules


When a file is run directly, require.main is set to its module.
require.main === module
( --true if run node foo.js, false if run by require ('./foor')-- )

filename property(__filename); entry point can be obtained by require.main.filename.

to get the exact filename that will be loaded when require() is called, use require.resolve() function.

==========================
The filename extension of the compiled Addon binary is .node (as opposed to .dll or .so). The require() function is written to look for files with the .node file extension and initialize those as dynamically-linked libraries.

When calling require(), the .node extension can usually be omitted and Node.js will still find and initialize the Addon. One caveat, however, is that Node.js will first attempt to locate and load modules or JavaScript files that happen to share the same base name. For instance, if there is a file addon.js in the same directory as the binary addon.node, then require('addon') will give precedence to the addon.js file and load it instead.
===========================

To get the exact filename that will be loaded when require() is called, use the require.resolve() function.

Putting together all of the above, here is the high-level algorithm in pseudocode of what require.resolve() does:

require(X) from module at path Y
1. If X is a core module,
   a. return the core module
   b. STOP
2. If X begins with '/'
   a. set Y to be the filesystem root
3. If X begins with './' or '/' or '../'
   a. LOAD_AS_FILE(Y + X)
   b. LOAD_AS_DIRECTORY(Y + X)
4. LOAD_NODE_MODULES(X, dirname(Y))
5. THROW "not found"

LOAD_AS_FILE(X)
1. If X is a file, load X as JavaScript text.  STOP
2. If X.js is a file, load X.js as JavaScript text.  STOP
3. If X.json is a file, parse X.json to a JavaScript Object.  STOP
4. If X.node is a file, load X.node as binary addon.  STOP

LOAD_INDEX(X)
1. If X/index.js is a file, load X/index.js as JavaScript text.  STOP
2. If X/index.json is a file, parse X/index.json to a JavaScript object. STOP
3. If X/index.node is a file, load X/index.node as binary addon.  STOP

LOAD_AS_DIRECTORY(X)
1. If X/package.json is a file,
   a. Parse X/package.json, and look for "main" field.
   b. let M = X + (json main field)
   c. LOAD_AS_FILE(M)
   d. LOAD_INDEX(M)
2. LOAD_INDEX(X)

LOAD_NODE_MODULES(X, START)
1. let DIRS = NODE_MODULES_PATHS(START)
2. for each DIR in DIRS:
   a. LOAD_AS_FILE(DIR/X)
   b. LOAD_AS_DIRECTORY(DIR/X)

NODE_MODULES_PATHS(START)
1. let PARTS = path split(START)
2. let I = count of PARTS - 1
3. let DIRS = [GLOBAL_FOLDERS]
4. while I >= 0,
   a. if PARTS[I] = "node_modules" CONTINUE
   b. DIR = path join(PARTS[0 .. I] + "node_modules")
   c. DIRS = DIRS + DIR
   d. let I = I - 1
5. return DIRS



CACHING:
modules are loaded once, when they are loaded. require('foo') will get same object by each call.
if require.cache isn't modified, require('foo') will not cause module code to be executed multiple times.
NOTE: To have a module execute code multiple times, export a function, and call that function.

Module Caching Caveats#
Modules are cached based on their resolved filename. Since modules may resolve to a different filename based on the location of the calling module (loading from node_modules folders), it is not a guarantee that require('foo') will always return the exact same object, if it would resolve to different files.

Additionally, on case-insensitive file systems or operating systems, different resolved filenames can point to the same file, but the cache will still treat them as different modules and will reload the file multiple times. For example, require('./foo') and require('./FOO') return two different objects, irrespective of whether or not ./foo and ./FOO are the same file.

Core Modules:

Node.js has several modules compiled into binary. THese core modules are defined within Node.js's source, located in lib/ folder. Core modules are preferentially loaded if their identifier is passef to require(). 
Example: require('http') will always return built-in HTTP module, even if there is a file by that name.

Cycles#
When there are circular require() calls, a module might not have finished executing when it is returned.
--read example in the link--
When main.js loads a.js, then a.js in turn loads b.js. At that point, b.js tries to load a.js. In order to prevent an infinite loop, an unfinished copy of the a.js exports object is returned to the b.js module. b.js then finishes loading, and its exports object is provided to the a.js module.

File Modules:
if exact filename not found, Node.js will load filename with extensions: .js, .json and finally .node.
.js interpreted as JavaScript files, .json files parsed as JSON text files, .node files are interpreted as compiled addon mosules loaded with process.dlopen().
'/' is absolute path to the file.
'./' is relative to the file calling require(). file must be in same directory.
without a leadinf '/', './', '../' module must be either a core module or is loaded from node_modules folder.
If path doesn't exist, require() will throw an Error with its code property set to 'MODULE_NOT_FOUND'.

Folders as Modules:

If this was in a folder at ./some-library, then require('./some-library') would attempt to load ./some-library/lib/some-library.js.

This is the extent of Node.js's awareness of package.json files.

If there is no package.json file present in the directory, or if the 'main' entry is missing or cannot be resolved, then Node.js will attempt to load an index.js or index.node file out of that directory. For example, if there was no package.json file in the above example, then require('./some-library') would attempt to load:

./some-library/index.js
./some-library/index.node
If these attempts fail, then Node.js will report the entire module as missing with the default error:

Error: Cannot find module 'some-library'

Loading from `node_modules` Folders#
If the module identifier passed to require() is not a core module, and does not begin with '/', '../', or './', then Node.js starts at the parent directory of the current module, and adds /node_modules, and attempts to load the module from that location. Node.js will not append node_modules to a path already ending in node_modules.

Note: If it is not found there, then it moves to the parent directory, and so on, until the root of the file system is reached.

For example, if the file at '/home/ry/projects/foo.js' called require('bar.js'), then Node.js would look in the following locations, in this order:

/home/ry/projects/node_modules/bar.js
/home/ry/node_modules/bar.js
/home/node_modules/bar.js
/node_modules/bar.js
This allows programs to localize their dependencies, so that they do not clash.




Loading from the global folders:
If the NODE_PATH environment variable is set to a colon-delimited list of absolute paths, then Node.js will search those paths for modules if they are not found elsewhere.
NODE_PATH was originally created to support loading modules from varying paths before the current ..module resolution..(ALL TOGETHER, above) algorithm was frozen.
Additionally, Node.js will search in the following list of GLOBAL_FOLDERS:

1: $HOME/.node_modules
2: $HOME/.node_libraries
3: $PREFIX/lib/node
Where $HOME is the user's home directory, and $PREFIX is Node.js's configured node_prefix.

It is strongly encouraged to place dependencies in the local node_modules folder. These will be loaded faster, and more reliably.



Module Wrapper:
Before a module's code is executed, Node.js will wrap it with following function:
(function( exports, require, module, __filename, __dirname ){
    // Module code
})
Benefites of doing ths:
1. keeps top-level variable(var, const or let) scoped to module rather than global object.
2. provide global looking variables specific to the module.
    a. module and exports objects that can be used to export modules        from the module.
    b. convenience variables __filename and __dirname